@page
@model MaineCoon.Pages.Developer.AddProcesserModel
@{
    ViewData["Title"] = "Add Alg";
}
<link rel="stylesheet" href="~/css/step.css" />
<div class="main">
    <div class="container formcontainer">
        <h2>Build your Algorithm</h2>
        <form method="POST" id="signup-form" class="step-form" enctype="multipart/form-data">
            <h3>
                API Information
            </h3>
            <fieldset>
                <div class="form-row form-group">
                    <input class="form-control" asp-for="processorInfo.friendlyName" type="text" id="friendlyName" placeholder="@Html.DisplayNameFor(model => model.processorInfo.friendlyName)" required />
                    <span asp-validation-for="processorInfo.friendlyName" class="text-danger"></span>
                </div>
                <div class="form-row form-group">
                    <input class="form-control" asp-for="processorInfo.Instruction" type="text" id="Instruction" placeholder="@Html.DisplayNameFor(model => model.processorInfo.Instruction)" required />
                    <span asp-validation-for="processorInfo.Instruction" class="text-danger"></span>
                </div>
                <div class="form-row form-group">
                    <input class="form-control" asp-for="processorInfo.trainCallbackURL" type="text" id="trainCallbackURL" placeholder="@Html.DisplayNameFor(model => model.processorInfo.trainCallbackURL)" required />
                    <span asp-validation-for="processorInfo.trainCallbackURL" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <div class="form-row">
                        <input class="form-control" asp-for="processorInfo.getResultURL" type="text" id="getResultURL" placeholder="@Html.DisplayNameFor(model => model.processorInfo.getResultURL)" required />
                        <span asp-validation-for="processorInfo.getResultURL" class="text-danger"></span>
                    </div>
                    <div class="form-row">
                        <div class="form-check">
                            <input class="form-check-input" asp-for="processorInfo.isGetResultNeedWaitCallback" type="checkbox" id="isGetResultNeedWaitCallback" />
                            <label class="form-check-label" asp-for="processorInfo.isGetResultNeedWaitCallback">@Html.DisplayNameFor(model => model.processorInfo.isGetResultNeedWaitCallback)</label>
                        </div>
                    </div>
                </div>
                <div class="form-row form-group">
                    <input class="form-control" asp-for="processorInfo.resetURL" type="text" id="resetURL" placeholder="@Html.DisplayNameFor(model => model.processorInfo.resetURL)" />
                    <span asp-validation-for="processorInfo.resetURL" class="text-danger"></span>
                </div>
                <div class="form-row form-group">
                    <label for="TLSversion" class="sr-only">@Html.DisplayNameFor(model => model.processorInfo.TLSversion)</label>
                    <select asp-for="processorInfo.TLSversion" class="form-control" id="TLSversion" required>
                        @foreach (var item in Enum.GetNames(typeof(Models.Processer.TLSVersion))) {
                            <option value="0">@item.ToString()</option>
                        }
                    </select>
                </div>
            </fieldset>

            <h3>
                Parameter
            </h3>

            <fieldset>
                <div class="dynamicInput">
                    <div class="entry input-group form-group form-row">
                        <div class="col-3">
                            <input class="form-control" name="parameterName[]" id="parameterName"  type="text" placeholder="parameter name" required />
                        </div>
                        <div class="col-5">
                            <input class="form-control" name="parameterInstruction[]" id="parameterInstruction"  type="text" placeholder="parameter Instruction" required />
                        </div>
                        <div class="col-2">
                            <select class="custom-select form-control" id="parameterType" required>
                                <option value="@Models.CataType.Type.number">@Models.CataType.Type.number</option>
                                <option value="@Models.CataType.Type.text">@Models.CataType.Type.text</option>
                                <option value="@Models.CataType.Type.file">@Models.CataType.Type.file</option>
                            </select>
                        </div>
                        <div class="input-group-btn col-1">
                            <button class="btn btn-success btn-add" type="button">
                                <span data-feather="plus"></span>
                            </button>
                        </div>
                    </div>
                </div>
            </fieldset>


            <h3>
                Summary
            </h3>
            <fieldset>
                <div class=" form-group form-row">
                    <textarea asp-for="processorInfo.AlgorithmParameterJson" id="jsonSummary" class="form-control" style="height:15vh;overflow:scroll" placeholder="@Html.DisplayNameFor(model => model.processorInfo.AlgorithmParameterJson)" readonly required>
                    </textarea>
                </div>
                <div class=" form-group form-row">
                    <textarea asp-for="processorInfo.publicKey" id="publicKey" class="form-control" style="height:15vh;overflow:scroll" placeholder="@Html.DisplayNameFor(model => model.processorInfo.publicKey)" required>
                    </textarea>
                </div>
            </fieldset>

        </form>
    </div>
</div>
<script>
    
(function ($) {
    window.addEventListener('load', function () {
        var form = $(".needs-validation");
        form.validate({
            ignore: ":hidden,:disabled"
        });
    }, false);
    var form = $(".step-form");
    form.steps({
        headerTag: "h3",
        bodyTag: "fieldset",
        transitionEffect: "fade",
        labels: {
            previous: 'Previous',
            next: 'Next',
            finish: 'Finish',
            current: ''
        },
        titleTemplate: '<h3 class="title">#title#</h3>',

        onStepChanging: function (event, currentIndex, newIndex) {
            form.validate().settings.ignore = ":disabled,:hidden";
            if (newIndex == 2) {
                var json = {};
                json["parameters"] = {};


                var parameterNames = $("input#parameterName");
                var parameterInstructions = $("input#parameterInstruction");
                var parameterTypes = $("select#parameterType");
                for (var i = 0; i < parameterNames.length; i++) {
                    var parameter = {};
                    parameter['Name'] = parameterNames.value;
                    parameter['Instruction'] = parameterInstructions[i].value;
                    parameter['Type'] = parameterTypes[i].value;
                    json['parameters'][i] = parameter;
                }
                $("#jsonSummary")[0].value = JSON.stringify(json);
            }
            return form.valid();
        },
        onFinishing: function (event, currentIndex) {
            form.validate().settings.ignore = ":disabled,:hidden";
            return form.valid();
        },
        onFinished: function (event, currentIndex) {
            $(this).submit();
        }
    });

})(jQuery);
</script>
<script>
    (function () {
        'use strict';
        window.addEventListener('load', function () {
            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            var forms = document.getElementsByClassName('needs-validation');
            // Loop over them and prevent submission
            var validation = Array.prototype.filter.call(forms, function (form) {
                form.addEventListener('submit', function (event) {
                    if (form.checkValidity() === false) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });
        }, false);
    })();
</script>
<script src="~/js/dynamicInput.js"></script>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}