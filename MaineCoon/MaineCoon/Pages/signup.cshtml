@page
@model MaineCoon.Pages.SignupModel
@{
    ViewData["Title"] = "Sign up";
}
<link rel="stylesheet" href="~/css/signin_and_signup.css" />

<link rel="stylesheet" href="~/css/step.css" />
<div class="main">
    <div class="container formcontainer">
        <h2>@ViewData["Title"]</h2>
        <form method="POST" id="signup-form" class="signup-form needs-validation step-form" novalidate>
            <h3>
                Your Information
            </h3>
            <fieldset>
                <div class="form-row form-group">
                    <input asp-for="UserData.email" type="email" id="email" name="UserData.email" class="form-control" placeholder="@Html.DisplayNameFor(m=>m.UserData.email)" required autofocus>
                    <span asp-validation-for="UserData.email" class="text-danger"></span>
                </div>
                <div class="form-row form-group">
                    <input asp-for="UserData.name" type="text" id="name" name="UserData.name" class="form-control" placeholder="@Html.DisplayNameFor(m=>m.UserData.name)" required>
                    <span asp-validation-for="UserData.name" class="text-danger"></span>
                </div>
                <div class="form-row form-group">
                    <input type="password" name="password" id="password" class="form-control" placeholder="@Html.DisplayNameFor(m=>m.UserData.password)" data-msg-required="password is required." data-rule-required="true" required>
                    <span class="text-danger field-validation-valid" data-valmsg-for="password" data-valmsg-replace="true"></span>
                    <input hidden asp-for="UserData.password" type="password" id="hmacpwd" />
                </div>
                <div class="form-row form-group">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="invalidCheck" name="invalidCheck" required>
                        <label class="form-check-label" for="invalidCheck">
                            Agree to terms and conditions
                        </label>
                        <div class="invalid-feedback">
                            You must agree before submitting.
                        </div>
                    </div>
                </div>
                <div class="form-row form-group">
                    <label for="reCAPTCHA" class="sr-only">reCAPTCHA</label>
                </div>
            </fieldset>

            <h3>
                Role
            </h3>
            <fieldset>
                <div class="form-radio">
                    <label for="job" class="label-radio">Select a role</label>
                    <div class="form-flex">

                        <div class="form-radio">
                            <input asp-for="UserData.sysRole" type="radio" value="@Models.User.role.Student" id="@Models.User.role.Student.ToString()" checked />
                            <label for="@Models.User.role.Student.ToString()">
                                <figure>
                                    <span data-feather="user" class="icon"></span>
                                </figure>
                                <span>@Models.User.role.Student.ToString()</span>
                            </label>
                        </div>

                        <div class="form-radio">
                            <input asp-for="UserData.sysRole" type="radio" value="@Models.User.role.SchoolAdmin" id="@Models.User.role.SchoolAdmin.ToString()" />
                            <label for="@Models.User.role.SchoolAdmin.ToString()">
                                <figure>
                                    <span data-feather="home" class="icon"></span>
                                </figure>
                                <span>@Models.User.role.SchoolAdmin.ToString()</span>
                            </label>
                        </div>

                        <div class="form-radio">
                            <input asp-for="UserData.sysRole" type="radio" value="@Models.User.role.Developer" id="@Models.User.role.Developer.ToString()" />
                            <label for="@Models.User.role.Developer.ToString()">
                                <figure>
                                    <span data-feather="codesandbox" class="icon"></span>
                                </figure>
                                <span>@Models.User.role.Developer.ToString()</span>
                            </label>
                        </div>

                        <div class="form-radio">
                            <input asp-for="UserData.sysRole" type="radio" value="@Models.User.role.WebsiteAdmin" id="@Models.User.role.WebsiteAdmin.ToString()" />
                            <label for="@Models.User.role.WebsiteAdmin.ToString()">
                                <figure>
                                    <span data-feather="tool" class="icon"></span>
                                </figure>
                                <span>@Models.User.role.WebsiteAdmin.ToString()</span>
                            </label>
                        </div>

                    </div>
                </div>
            </fieldset>

            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        </form>
    </div>
</div>




<script src="~/js/sha256.min.js"></script>
<script src="~/js/step.js"></script>
<script src="https://www.google.com/recaptcha/api.js?render=6Lefar0UAAAAAIQYedhHO0bnH4L9lw5wFCJ5yH0T"></script>
<script>
    (function () {
        $(".needs-validation").bind("submit", function () {
            $("#hmacpwd")[0].value = sha256.hmac($("#email")[0].value, $("#password")[0].value);
        });
    })();
</script>
<script>
    (function () {
        'use strict';
        window.addEventListener('load', function () {
            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            var forms = document.getElementsByClassName('needs-validation');
            // Loop over them and prevent submission
            var validation = Array.prototype.filter.call(forms, function (form) {
                form.addEventListener('submit', function (event) {
                    if (form.checkValidity() === false) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });
        }, false);
    })();
</script>
<script>
    grecaptcha.ready(function () {
        grecaptcha.execute('6Lefar0UAAAAAIQYedhHO0bnH4L9lw5wFCJ5yH0T', { action: 'login' }).then(function (token) {
            document.getElementById("retoken").value = token;
        });
    });
</script>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

